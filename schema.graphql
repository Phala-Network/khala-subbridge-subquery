
type Tx @entity {
    id: ID!
    hash: String!
    sender: String!
}

#XTransfer records
type XTransferWithdrawn @entity {
    id: ID!
    createdAt: Date!
}

type XTransferDeposited @entity {
    id: ID!
    createdAt: Date!
}

type XTransferForwarded @entity {
    id: ID!
    createdAt: Date!
}

# XCM records
type XcmTransfered @entity {
    id: ID!
    createdAt: Date!

    asset: String! @index
    sender: String! @index
    recipient: String! @index
    amount: BigInt

    index: Int!
}

# ChainBridge records
type CTxSent @entity {
    id: ID!
    createdAt: Date!

    # destChainId and depositNonce can be used to track
    # crosschain transfer status on dest chain
    destChainId: Int! @index
    depositNonce: BigInt! @index

    resourceId: String! @index
    amount: BigInt
    recipient: String @index

    sendTx: String

    # Sender can be used to construct user transaction history
    sender: String @index

    index: Int!
}

type CTxReceived @entity {
    id: ID!
    createdAt: Date!

    # Origin chain can use destChainId and depositNonce to track
    # crosschain transfer status on this chain
    originChainId: Int! @index
    depositNonce: BigInt! @index

    resourceId: String! @index
    # Proposal status being updated when vote happened
    status: String!

    voteTxs: [String!]!
    executeTx: String
}