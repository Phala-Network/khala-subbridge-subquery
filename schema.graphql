
type Tx @entity {
    id: ID!
    hash: String!
    sender: String!
}

#XTransfer records
type XTransferWithdrawn @entity {
    id: ID!
    createdAt: Date!

    # Encoded concrete asset id as string of MultiAsset
    asset: String! @index
    # Reprents an local account who paied the asset
    account: String! @index
    amount: BigInt
}

type XTransferDeposited @entity {
    id: ID!
    createdAt: Date!

    # Encoded concrete asset id as string of MultiAsset
    asset: String! @index
    amount: BigInt!

    isLocal: Boolean
    # Represent an local account when isLocal is true
    account: String
    
    isRemote: Boolean
    # An encoded MultiLocation indicate a dest location
    location: String

    # Recipient corresponding index, should read RecevingCount of the user/location to set this value
    index: Int! @index
}

type XTransferForwarded @entity {
    id: ID!
    createdAt: Date!

    # Encoded concrete asset id as string of MultiAsset
    asset: String! @index
    amount: BigInt!
    location: String! @index
}

type XTransferSent @entity {
    id: ID!
    createdAt: Date!

    isXcm: Boolean
    # Refer to a XcmTransfered record
    xcm: XcmTransfered

    isChainbridge: Boolean
    # Refer to a CTxSent record
    chainbridge: CTxSent

    sender: String! @index
    # Sender corresponding index, should read SendigCount of the user to set this value
    index: Int! @index
}

# Saving the number of crosschain transfer a user has issuedd, id should be sender address
type SendingCount @entity {
    id: ID!
    count: Int!
}

# Saving the number of crosschain transfer a user has received, id should be sender address
type RecevingCount @entity {
    id: ID!
    count: Int!
}

# XCM records
type XcmTransfered @entity {
    id: ID!
    createdAt: Date!

    # Encoded concrete asset id as string of MultiAsset
    asset: String! @index
    sender: String! @index
    recipient: String! @index
    amount: BigInt
}

# ChainBridge records
type CTxSent @entity {
    id: ID!
    createdAt: Date!

    # destChainId and depositNonce can be used to track
    # crosschain transfer status on dest chain
    destChainId: Int! @index
    depositNonce: BigInt! @index

    resourceId: String! @index
    amount: BigInt
    recipient: String @index

    sendTx: Tx

    # Sender can be used to construct user transaction history
    sender: String @index
}

type CTxReceived @entity {
    id: ID!
    createdAt: Date!

    # Origin chain can use destChainId and depositNonce to track
    # crosschain transfer status on this chain
    originChainId: Int! @index
    depositNonce: BigInt! @index

    resourceId: String! @index
    # Proposal status being updated when vote happened
    status: String!

    voteTxs: [String!]!
    executeTx: Tx
}